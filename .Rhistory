here("https://raw.githubusercontent.com", "rfordatascience", "tidytuesday", "master", "data", "2023","2023-02-14", "age_gaps.csv")
here()
?here
print(.here)
file.path()
here::i_am()
here::i_am() <- ""
here::i_am("")
.libPaths()
here(.libPaths()[1], "library", "rio", "examples")
here(.libPaths()[1], "library", "rio", "examples") |> list.files()
here(.libPaths()[1], "library", "rio") |> list.files()
here(.libPaths()[1], "library") |> list.files()
here(.libPaths()[1]) |> list.files()
here(.libPaths()[1], "library") |> list.files()
here(.libPaths()[1], "library")
here(.libPaths()[1], "rio", "examples") |> list.files()
here(.libPaths()[1], "rio", "examples", "noheader.csv")
imoprt(here(.libPaths()[1], "rio", "examples", "noheader.csv"))
import(here(.libPaths()[1], "rio", "examples", "noheader.csv"))
import(here(.libPaths()[1], "rio", "examples", "example.csvy"))
import(here(.libPaths()[1], "rio", "examples", "iris.xls"))
readxl::excel_sheets(here(.libPaths()[1], "rio", "examples", "iris.xls"))
import(here(.libPaths()[1], "rio", "examples", "iris.xls"), which = "Sheet2")
import(here(.libPaths()[1], "rio", "examples", "noheader.csv"))
import(here(.libPaths()[1], "rio", "examples", "iris.xls"), which = "Sheet2")
library(matlab)
library(tidyverse)
begin <- 23047
end <- 24000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 20349
end <- 30000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(tabulizer)
?tabulizer::extract_tables
f <- system.file("examples", "data.pdf", package = "tabulizer")
# extract all tables
extract_tables(f)
f
f <- system.file("examples", "data.pdf", package = "tabulizer")
f <- system.file("examples", package = "tabulizer")
f
f
f <- system.file(package = "tabulizer")
f
f <- system.file("examples", "data.pdf", package = "tabulizer")
f
extract_tables(f, pages = 2)
extract_tables(f, pages = 2, output = "data.frame")
extract_tables(f, pages = 2, output = "data.frame")[[1]]
library(pdftools)
?pdftools::pdf_data
pdf_data(f)
library(tidyverse)
library(pdftools)
library(ggokabeito)   # Colorblind-friendly color palette
library(showtext)
library(ggrepel)
library(here)
library(gt)
library(pdftools)
directory <- "C:\\Users\\ehickey\\OneDrive - Technological University Dublin\\Desktop\\Academic\\Hector\\fizzics\\fizzics\\_posts\\2021-12-06-university-choices\\data"
font_add("Fuzzy Bubbles", regular = here(directory, "../fonts/FuzzyBubbles-Regular.ttf"))
showtext_auto()
theme_clean <- function() {
theme_minimal(base_family = "Fuzzy Bubbles") +
theme(panel.grid.minor = element_blank(),
text = element_text(size = 28, family = "Fuzzy Bubbles"),
plot.background = element_rect(fill = "white", color = NA),
axis.text = element_text(size = 32),
axis.title = element_text(face = "bold", size = 36),
strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA),
legend.text = element_text(size = 24))
}
years <- c("07", "08", "09", "10", "13", 14:19 )
cao_points_year <- function(year) {
cao_pdf <- glue::glue("http://www2.cao.ie/points/lvl8_{year}.pdf")
z <- pdf_text(cao_pdf) %>%
str_split("\n") %>%
unlist()
z <- z[!str_detect(z, "^ ") & z != "" & !str_detect(z, "Course Code") & str_count(z, "  +") == 3] %>% # gets rid of non-data rows
str_split("  +") %>% # splits rows based on runs of several spaces
unlist() %>%
str_remove("#") %>%
str_remove("\\*") # deletes some annoying characters
z <- tibble(year = glue::glue("20{year}"),
code = z[c(T, F, F, F)],
course = z[c(F, T, F, F)],
final = z[c(F, F, T, F)],
medium = z[c(F, F, F, T)])
# original list made bunches of four elements that together described a course. This tibble winds them up to one row
z
}
z <- map_df(years, cao_points_year) %>%
mutate(year = as.numeric(year))
z21 <- readxl::read_excel(here(directory, "CAOPointsCharts2021.xlsx"),
sheet = "EOS_2021", skip = 10) %>%
janitor::clean_names() %>%
filter(course_level == 8) %>%
mutate(year = 2021) %>%
select(year,
code = course_code,
course = course_title,
final = eos_points,
medium = eos_midpoints) %>%
mutate(year = 2021,
medium = as.character(medium))
z20 <- readxl::read_excel(here(directory,"CAOPointsCharts2020.xlsx"),
sheet = "PointsCharts2020_V2", skip = 9) %>%
janitor::clean_names() %>%
filter(level == 8) %>%
mutate(year = 2020) %>%
select(year,
code = course_code2,
course = course_title,
final = eos,
medium = eos_mid_point) %>%
mutate(year = 2020)
z <- bind_rows(z, z20, z21)
View(z)
z1 <- z %>%
select(code, course) %>%
group_by(code) %>%
mutate(last_name = if_else(row_number() == n(), 1 ,0)) %>%
filter(last_name == 1) %>%
select(code, last_name = course)
z <- z %>%
left_join(z1) %>%
mutate(final = as.numeric(final),
medium = as.numeric(medium),
label = if_else(year == max(year),
as.character(code), NA_character_))
View(z)
courses <- z1 %>% filter(str_detect(last_name, "Physics"),
!str_detect(last_name, "Agri")) %>%
pull(code)
courses <- courses[1:9]
max_years <- z %>%  filter(code %in% courses) %>%
group_by(code) %>%
summarize(year_max = max(year)) |>
arrange(desc(year_max))
courses <- max_years$code[10:18]
z %>%  filter(code %in% courses) %>%
left_join(max_years) %>%
mutate(last_name = str_replace(last_name, "Environmental Science", "EnvSci.")) %>%
mutate(label = ifelse(year == year_max, code, "")) %>%
mutate(code = glue::glue("{code}: {abbreviate(last_name, 20)}")) %>%
ggplot(aes(year, final, colour = code, group = code)) +
geom_line(size = 2) +
geom_point(size = 5) +
geom_label_repel(aes(label = label),
nudge_x = 0.2,
size = 12,
na.rm = TRUE,
show.legend = F) +
scale_color_okabe_ito() +
scale_y_continuous(breaks = seq(100, 700, by = 50)) +
labs(y = "Final Points", x = "") +
theme_clean() +
theme(legend.position = "bottom", legend.title = element_blank()) +
guides(col=guide_legend(nrow=3))
my_year <- 2016
z2 <- z |>
filter(str_detect(code, "GA"),
year == my_year)
length <- min(c(50, nrow(z2)))
z2[1:length,] |>
gt()
z %>%  filter(code %in% courses) %>%
left_join(max_years) %>%
mutate(last_name = str_replace(last_name, "Environmental Science", "EnvSci.")) %>%
mutate(label = ifelse(year == year_max, code, "")) %>%
mutate(code = glue::glue("{code}: {abbreviate(last_name, 20)}")) %>%
ggplot(aes(year, final, colour = code, group = code)) +
geom_line(size = 2) +
geom_point(size = 5) +
geom_label_repel(aes(label = label),
nudge_x = 0.2,
size = 12,
na.rm = TRUE,
show.legend = F) +
scale_color_okabe_ito() +
scale_y_continuous(breaks = seq(100, 700, by = 50)) +
labs(y = "Final Points", x = "") +
theme_clean() +
theme(legend.position = "bottom", legend.title = element_blank()) +
guides(col=guide_legend(nrow=3))
max_years <- z %>%  filter(code %in% courses) %>%
group_by(code) %>%
summarize(year_max = max(year)) |>
arrange(desc(year_max))
courses <- max_years$code[10:18]
courses
max_years
courses <- z1 %>% filter(str_detect(last_name, "Physics"),
!str_detect(last_name, "Agri")) %>%
pull(code)
courses
max_years <- z %>%  filter(code %in% courses) %>%
group_by(code) %>%
summarize(year_max = max(year)) |>
arrange(desc(year_max))
courses <- max_years$code[10:18]
z %>%  filter(code %in% courses) %>%
left_join(max_years) %>%
mutate(last_name = str_replace(last_name, "Environmental Science", "EnvSci.")) %>%
mutate(label = ifelse(year == year_max, code, "")) %>%
mutate(code = glue::glue("{code}: {abbreviate(last_name, 20)}")) %>%
ggplot(aes(year, final, colour = code, group = code)) +
geom_line(size = 2) +
geom_point(size = 5) +
geom_label_repel(aes(label = label),
nudge_x = 0.2,
size = 12,
na.rm = TRUE,
show.legend = F) +
scale_color_okabe_ito() +
scale_y_continuous(breaks = seq(100, 700, by = 50)) +
labs(y = "Final Points", x = "") +
theme_clean() +
theme(legend.position = "bottom", legend.title = element_blank()) +
guides(col=guide_legend(nrow=3))
z2[1:length,] |>
gt()
library(tabulizer)
extract_tables(file = "week-02/pdf-tables.pdf")
z2 <- extract_tables(file = "week-02/pdf-tables.pdf")
View(z2)
z2 <- extract_tables(file = "week-02/pdf-tables.pdf")[[1]]
?extract_tables
z2 <- extract_tables(file = "week-02/pdf-tables.pdf", method="data.frame")
z2 <- extract_tables(file = "week-02/pdf-tables.pdf", output = "data.frame")
z2 <- extract_tables(file = "week-02/pdf-tables.pdf", output = "data.frame")[[1]]
library(tidyverse)
library(pdftools)
library(ggokabeito)   # Colorblind-friendly color palette
library(showtext)
library(ggrepel)
library(here)
library(gt)
library(pdftools)
directory <- "C:\\Users\\ehickey\\OneDrive - Technological University Dublin\\Desktop\\Academic\\Hector\\fizzics\\fizzics\\_posts\\2021-12-06-university-choices\\data"
years <- c("07", "08", "09", "10", "13", 14:19 )
cao_points_year <- function(year) {
cao_pdf <- glue::glue("http://www2.cao.ie/points/lvl8_{year}.pdf")
z <- pdf_text(cao_pdf) %>%
str_split("\n") %>%
unlist()
z <- z[!str_detect(z, "^ ") & z != "" & !str_detect(z, "Course Code") & str_count(z, "  +") == 3] %>% # gets rid of non-data rows
str_split("  +") %>% # splits rows based on runs of several spaces
unlist() %>%
str_remove("#") %>%
str_remove("\\*") # deletes some annoying characters
z <- tibble(year = glue::glue("20{year}"),
code = z[c(T, F, F, F)],
course = z[c(F, T, F, F)],
final = z[c(F, F, T, F)],
medium = z[c(F, F, F, T)])
# original list made bunches of four elements that together described a course. This tibble winds them up to one row
z
}
z <- map_df(years, cao_points_year) %>%
mutate(year = as.numeric(year))
z21 <- readxl::read_excel(here(directory, "CAOPointsCharts2021.xlsx"),
sheet = "EOS_2021", skip = 10) %>%
janitor::clean_names() %>%
filter(course_level == 8) %>%
mutate(year = 2021) %>%
select(year,
code = course_code,
course = course_title,
final = eos_points,
medium = eos_midpoints) %>%
mutate(year = 2021,
medium = as.character(medium))
z20 <- readxl::read_excel(here(directory,"CAOPointsCharts2020.xlsx"),
sheet = "PointsCharts2020_V2", skip = 9) %>%
janitor::clean_names() %>%
filter(level == 8) %>%
mutate(year = 2020) %>%
select(year,
code = course_code2,
course = course_title,
final = eos,
medium = eos_mid_point) %>%
mutate(year = 2020)
z <- bind_rows(z, z20, z21)
View(z)
table(z$year)
z1 <- z %>%
select(code, course) %>%
group_by(code) %>%
mutate(last_name = if_else(row_number() == n(), 1 ,0)) %>%
filter(last_name == 1) %>%
select(code, last_name = course)
z <- z %>%
left_join(z1) %>%
mutate(final = as.numeric(final),
medium = as.numeric(medium),
label = if_else(year == max(year),
as.character(code), NA_character_))
courses <- z1 %>% filter(str_detect(last_name, "Physics"),
!str_detect(last_name, "Agri")) %>%
pull(code)
max_years <- z %>%  filter(code %in% courses) %>%
group_by(code) %>%
summarize(year_max = max(year)) |>
arrange(desc(year_max))
courses <- max_years$code[10:18]
z %>%  filter(code %in% courses) %>%
left_join(max_years) %>%
mutate(last_name = str_replace(last_name, "Environmental Science", "EnvSci.")) %>%
mutate(label = ifelse(year == year_max, code, "")) %>%
mutate(code = glue::glue("{code}: {abbreviate(last_name, 20)}")) %>%
ggplot(aes(year, final, colour = code, group = code)) +
geom_line(size = 2) +
geom_point(size = 5) +
geom_label_repel(aes(label = label),
nudge_x = 0.2,
size = 12,
na.rm = TRUE,
show.legend = F) +
scale_color_okabe_ito() +
scale_y_continuous(breaks = seq(100, 700, by = 50)) +
labs(y = "Final Points", x = "") +
theme_clean() +
theme(legend.position = "bottom", legend.title = element_blank()) +
guides(col=guide_legend(nrow=3))
my_year <- 2016
z2 <- z |>
filter(str_detect(code, "GA"),
year == my_year)
View(z2)
z2 <- z2 |> mutate(code1 = str_sub(code, 1, 2))
table(z2$code1)
z <- map_df(years, cao_points_year) %>%
mutate(year = as.numeric(year))
z21 <- readxl::read_excel(here(directory, "CAOPointsCharts2021.xlsx"),
sheet = "EOS_2021", skip = 10) %>%
janitor::clean_names() %>%
filter(course_level == 8) %>%
mutate(year = 2021) %>%
select(year,
code = course_code,
course = course_title,
final = eos_points,
medium = eos_midpoints) %>%
mutate(year = 2021,
medium = as.character(medium))
z20 <- readxl::read_excel(here(directory,"CAOPointsCharts2020.xlsx"),
sheet = "PointsCharts2020_V2", skip = 9) %>%
janitor::clean_names() %>%
filter(level == 8) %>%
mutate(year = 2020) %>%
select(year,
code = course_code2,
course = course_title,
final = eos,
medium = eos_mid_point) %>%
mutate(year = 2020)
z <- bind_rows(z, z20, z21)
z1 <- z %>%
select(code, course) %>%
group_by(code) %>%
mutate(last_name = if_else(row_number() == n(), 1 ,0)) %>%
filter(last_name == 1) %>%
select(code, last_name = course)
z <- z %>%
left_join(z1) %>%
mutate(final = as.numeric(final),
medium = as.numeric(medium),
label = if_else(year == max(year),
as.character(code), NA_character_)) |>
mutate(code1 = str_sub(code, 1, 2))
table(z2$code1)
table(z$code1)
table(z$year)
library(tidyverse)
library(matlab)
begin <- 30003
end <-1030000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1 & between(numbers %% 10000, 000, 1000)]
end <-100000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1 & between(numbers %% 10000, 000, 1000)]
begin <- 90003
end <-100000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
end <-91000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
load("C:/Users/ehickey/Downloads/data_a1dfec537b97352b6beb42b8811f6534.RData")
load("C:/Users/ehickey/Downloads/data_a1dfec537b97352b6beb42b8811f6534.RData")
install.packages("dplyr")
library(rentrez)
library(tidyverse)
entrez_db_searchable("nuccore")
z <- entrez_search(db = "nuccore", term = "brca1")
z
z[[1]]
z[[2]]
z[[3]]
z[[4]]
z[[5]]
z[[1]]
z1 <- entrez_fetch(db = "nuccore", id = z[[1]][1], rettype = "fasta")
z1
z[[1]][1]
rio::import("https://docs.google.com/spreadsheets/d/1lu6v9Q99odU8ZiapxVY--aclJ1hg03mCnGfNpIPo-1w/edit?usp=sharing")
library(tidyquant)
tq_index("DOW")
?tq_index
?tq_index_index
?tq_index_options
tq_index_options()
library(tidyverse)
library(rtweet)
date <- Sys.Date()
date <- paste0(wday(date, label = T, abbr = F), " ", month(date, label = T, abbr = F), " ", day(date), " ",year(date))
search_term <- "coronavirus"
# downloads tweets
token <- get_token()
?auth_get()
auth_get()
# downloads tweets
token <- auth_get()# get_token()
greens <- search_tweets(q= search_term, n=10000,
geocode = "53.33,-6.25,500mi",
token = token)
library(rtoot)
auth_setup()
auth_setup()
auth_setup()
auth_setup()
?rtoot::get_status
get_timeline_public(instance = "mastodon.social")
z <- get_timeline_public(instance = "mastodon.social")
View(z)
z <- get_timeline_hashtag(hashtag = "rstats", instance = "fosstodon.org")
z <- get_timeline_public(instance = "mastodon.social")
?get_timeline_public
z <- get_timeline_public(instance = "mastodon.social", limit = 2000)
Titanis
Titanic
class(Titanic)
Titanic[[1]]
Titanic[[2]]
library(dslabs)
dslabs::movielens
?dslabs
?dslabs::ds_theme_set
dslabs::brca
class(brca)
dslabs::admissions
dslabs::results_us_election_2016
dslabs::gapminder
dslabs::results_us_election_2016 |> class()
dslabs:: |> class()
dslabs::death_prob |> class()
dslabs::tissue_gene_expression |> class()
dslabs::tissue_gene_expression
base::T
data()
dslabs::murders |> class()
dslabs::movielens |> class()
dslabs::trump_tweets |> class()
dslabs::research_funding_rates |> class()
install.packages("biomod2")
starwars <- read_html("https://rvest.tidyverse.org/articles/starwars.html")
library(rvest)
starwars <- read_html("https://rvest.tidyverse.org/articles/starwars.html")
starwars
films <- starwars %>% html_elements("section")
films
year <- 2000:2022 |>
sample(1)
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31")
year
new_url
read_html(new_url)
read_html(new_url) |> html_element(".runtime")
read_html(new_url) |> html_element(".runtime") |> html_table()
new_url
read_html(new_url) |> html_node(".runtime")
read_html(new_url) |> html_nodes(".runtime")
read_html(new_url) |> html_nodes(".runtime") |> html_text2()
?html_element
read_html(new_url) |> html_element("css")
read_html(new_url) |> html_elements("css")
html <- read_html("https://en.wikipedia.org/w/index.php?title=The_Lego_Movie&oldid=998422565")
html %>%
html_element(".tracklist") %>%
html_table()
html |> html_nodes(".tracklist")
html |> html_nodes(".tracklist") |>
html_table()
html <- read_html(new_url)
html %>%
html_element(".tracklist") %>%
html_table()
