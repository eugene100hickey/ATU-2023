library(tidyverse)
library(gt)
library(RefManageR)
library(showtext)
z <- citation("sf") |> as.BibEntry()
z
z |> format()
z$author[[1]]
z <- citation("sf") |> as.BibEntry() |> pull(author)
z <- citation("sf") |> as.BibEntry() |> as.data.frame()
z
z <- citation("sf") |> as.BibEntry() |> as.data.frame() |> pull(author)
z
author_name <- function(package = "sf") {
citation(package) |> as.BibEntry() |> as.data.frame() |> pull(author)
}
author_name()
author_name("dplyr")
author_name("terra")
author_name("gt")
author_name("RefManageR")
my_packages <- c("sf", "showtext", "ABAData", "ggtext")
author_name("ABAData")
map(my_packages, author_name)
map_chr(my_packages, author_name)
author_name("sen2r")
author_name("rexams")
author_name("exams")
citation("exams")
citation("getTBinR")
author_name("getTBinR")
author_name("malariaX")
author_name("ggseg")
install.packages("ggseg")
author_name("ggseg")
devtools::install_github('malaria-atlas-project/malariaAtlas')
author_name("malariaAtlas")
library(malariaAtlas)
isAvailable_pr(country = "Madagascar")
?isAvailable_pr
isAvailable_pr(country = "Nigeria")
isAvailable_pr(country = "Italy")
listPoints()
?listPoints
listPoints(sourcedata = "pr points")
isAvailable_pr(country = "Yemen")
MDG_pr_data <- getPR(country = "Yemen", species = "both")
autoplot(MDG_pr_data,
facet = FALSE)
class(.Last.value)
library(showtext)
library(ggokabeito)
font_add_google(name = "Caveat", family = "my_font")
showtext_auto()
theme_clean <- function() {
theme_minimal(base_family = "my_font") +
theme(panel.grid.minor = element_blank(),
text = element_text(size = 36, family = "my_font"),
plot.background = element_rect(fill = "white", color = NA),
axis.text = element_text(size = 40),
axis.title = element_text(face = "bold", size =40),
strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA),
legend.text = element_text(size = 16))
}
autoplot(MDG_pr_data,
facet = FALSE) + theme_clean()
MMR_vec_data <- getVecOcc(country = "Yemen")
autoplot(MMR_vec_data) + theme_clean()
MDG_shp <- getShp(ISO = "IRL", admin_level = c("admin0", "admin1"))
MDG_shp <- as.MAPshp(MDG_shp)
autoplot(MDG_shp)
MDG_shp <- getShp(ISO = "IRL", admin_level = c("admin0", "admin1", "admin3"))
MDG_shp <- as.MAPshp(MDG_shp)
autoplot(MDG_shp)
MDG_shp <- getShp(ISO = "YMN", admin_level = "admin0")
library(countrycode)
countrycode("Yemen")
?countrycode
countrycode("Yemen", origin = "country.name")
countrycode("Yemen", origin = "country.name",destination = "iso")
countrycode("Yemen", origin = "country.name",destination = "iso3")
countrycode("Yemen", origin = "country.name",destination = "iso3c")
MDG_shp <- getShp(ISO = "YEM", admin_level = "admin0")
MDG_PfPR2_10 <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = MDG_shp, year = 2013
)
MDG_PfPR2_10_df <- as.MAPraster(MDG_PfPR2_10)
MDG_shp_df <- as.MAPshp(MDG_shp)
p <- autoplot(MDG_PfPR2_10_df, shp_df = MDG_shp_df)
MDG_PfPR2_10
MDG_PfPR2_10 <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = MDG_shp, year = 2013)
MDG_PfPR2_10
MDG_PfPR2_10_df <- as.MAPraster(MDG_PfPR2_10)
library(tidyverse)
library(matlab)
begin <- 30003
end <- 99000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30063
end <- 99000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 60003
end <- 70000
my_step <- 10
numbers[isprime(numbers)==1 & between(numbers %% 1000, 000, 100)]
begin <- 56003
end <- 56100
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
stock_soln <- 50
std_conc <- c(2, 4, 6, 8)
total_vol <- rep(20, length(std_conc))
stock_vol <- std_conc*total_vol / stock_soln
water_vol <- total_vol - stock_vol
sol <- c(stock_vol, water_vol)
lab <- c("Standard Conc. (ppm)",
"Volume Stock Added (mL)",
"Volume deionised water added (mL)",
"Total volume (mL)")
stock_numbers <- 1:4
stock_answers <- glue::glue("##ANSWER{stock_numbers}##")
water_numbers <- 5:8
water_answers <- glue::glue("##ANSWER{water_numbers}##")
my_table <- tibble(std_conc, stock_answers, water_answers, total_vol)
library(tidyverse)
stock_soln <- 50
std_conc <- c(2, 4, 6, 8)
total_vol <- rep(20, length(std_conc))
stock_vol <- std_conc*total_vol / stock_soln
water_vol <- total_vol - stock_vol
sol <- c(stock_vol, water_vol)
lab <- c("Standard Conc. (ppm)",
"Volume Stock Added (mL)",
"Volume deionised water added (mL)",
"Total volume (mL)")
stock_numbers <- 1:4
stock_answers <- glue::glue("##ANSWER{stock_numbers}##")
water_numbers <- 5:8
water_answers <- glue::glue("##ANSWER{water_numbers}##")
my_table <- tibble(std_conc, stock_answers, water_answers, total_vol)
View(my_table)
sol
theta = 125.12-104.48
sin(theta*pi/180)*3.33e-6/2
190+7/60
library(RefManageR)
my_packages <- c("sf", "showtext", "rtoot",
"ggtext", "palmerpenguins",
"sen2r", "ggseg", "malariaAtlas")
author_name <- function(package = "sf") {
citation(package) |> as.BibEntry() |> as.data.frame() |> pull(author)
}
map_chr(my_packages, author_name)
my_packages <- c("sf", "showtext", "rtoot",
"ggtext", "palmerpenguins",
"sen2r", "ggseg", "beepr")
author_name <- function(package = "sf") {
citation(package) |> as.BibEntry() |> as.data.frame() |> pull(author)
}
map_chr(my_packages, author_name)
library(exams)
elearn_exam <- c("rexams/package-author.Rmd")
set.seed(2021-01-22)
exams2moodle(elearn_exam, n = 3, name = "rexams/R-exams")
exams2moodle(elearn_exam, n = 3, name = "rexams/R-exams")
?exams2moodle
exams2moodle(elearn_exam, n = 3, name = "rexams")
my_packages <- c("sf", "showtext", "rtoot",
"ggtext", "palmerpenguins",
"sen2r", "ggseg", "beepr")
sample(my_packages)
my_packages <- c("sf", "showtext", "rtoot",
"ggtext", "palmerpenguins",
"sen2r", "ggseg", "beepr") |>
sample()
my_packages
exams2moodle(elearn_exam, n = 3, name = "rexams/R-exams")
exams2moodle(elearn_exam, n = 3, name = "rexams")
author_name <- function(package = "sf") {
citation(package) |> as.BibEntry() |> as.data.frame() |> pull(author)
}
author_name("terra")
author_name("rvest")
author_name("httr")
author_name("spatstat")
author_name("sp")
author_name("mapbliss")
author_name("stars")
author_name("boxoffice")
author_name("ggokabieto")
author_name("ggokabeito")
author_name("viridis")
author_name("distill")
author_name("earth")
author_name("countrycode")
author_name("elevatr")
author_name("emo")
author_name("exams")
author_name("extrafont")
author_name("ggchicklet")
author_name("planetR")
author_name("qrcode")
author_name("rticles")
author_name("scales")
author_name("SPADAR")
exams2moodle(elearn_exam, n = 3, name = "rexams")
package_version("sf")
packageVersion("sf")
library(tidyverse)
# library(tidytext)
library(rvest)
start <- 0
my_rating <- 7.3
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
(all_movies <- map_df(0:2, movie_ratings) |>
filter(rating == my_rating))
year <- 2016
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
index <- 11
cast_url <- glue::glue("https://www.imdb.com/title/tt{all_movies$code[index]}/fullcredits/?ref_=tt_ql_cl")
xml_cast <- ".primary_photo+ td a"
w <- read_html(cast_url)
cast_data_html <- html_nodes(w, xml_cast)
(cast <- html_text(cast_data_html) |>
str_remove("\n") |>
str_squish())
cast1 <- cast
year <- 2021
my_rating <- 8.2
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
index <- 1
cast_url <- glue::glue("https://www.imdb.com/title/tt{all_movies$code[index]}/fullcredits/?ref_=tt_ql_cl")
xml_cast <- ".primary_photo+ td a"
w <- read_html(cast_url)
cast_data_html <- html_nodes(w, xml_cast)
(cast <- html_text(cast_data_html) |>
str_remove("\n") |>
str_squish())
cast[cast %in% cast1]
year <- 2011
my_rating <- 8.2
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:1, movie_ratings) |>
filter(str_detect(genre, "Action"),
#str_detect(genre, "Adventure"),
str_detect(genre, "Adventure")))
head(diamonds)
library(tidyverse)
head(diamonds)
my_diamonds <- diamonds |>
select(across(is.numeric()))
my_diamonds <- diamonds |>
select_if(is.numeric())
my_diamonds <- diamonds |>
select(where(is.numeric()))
my_diamonds <- diamonds |>
select(where(is.numeric))
glimpse(my_diamonds)
glimpse(mdiamonds)
glimpse(diamonds)
parameters <- names(my_diamonds)
parameters
my_diamonds |> pull(parameters[1])
parameters <- names(my_diamonds) |> mean()
my_diamonds |> pull(parameters[1]) |> mean()
z <- my_diamonds |> pull(parameters[1])
parameters[1]
parameters <- names(my_diamonds)
z <- my_diamonds |> pull(parameters[1])
z
my_diamonds |> pull(parameters[1]) |> mean()
index <- sample(1:length(parameters), 1)
index
parameters
(index <- sample(1:length(parameters), 1))
(index <- sample(1:length(parameters), 1))
(index <- sample(1:length(parameters), 1))
(index <- sample(1:length(parameters), 1))
?case_when
my_diamonds
my_diamonds <- my_diamonds |> pull(parameters[index])
my_diamonds
range(my_diamonds)
z <- c(24, 27, 30, 35, 45, 60, 80, 100, 120)
1/z
my_diamonds <- diamonds |>
select(where(is.numeric))
parameters <- names(my_diamonds)
index <- sample(1:length(parameters), 1)
function_index <- sample(1:6, 1)
my_diamonds <- my_diamonds |> pull(parameters[index])
answer <- case_when(
function_index == 1 ~ mean(my_diamonds),
function_index == 2 ~ max(my_diamonds),
function_index == 3 ~ min(my_diamonds),
function_index == 4 ~ median(my_diamonds),
function_index == 5 ~ sd(my_diamonds),
function_index == 6 ~ max(my_diamonds)-min(my_diamonds)
)
answer
index
parameters
function_index
min(my_diamonds)
my_diamonds <- diamonds |>
select(where(is.numeric))
parameters <- names(my_diamonds)
index <- sample(1:length(parameters), 1)
function_index <- sample(1:6, 1)
my_diamonds <- my_diamonds |> pull(parameters[index])
answer <- case_when(
function_index == 1 ~ mean(my_diamonds),
function_index == 2 ~ max(my_diamonds),
function_index == 3 ~ min(my_diamonds),
function_index == 4 ~ median(my_diamonds),
function_index == 5 ~ sd(my_diamonds),
function_index == 6 ~ max(my_diamonds)-min(my_diamonds)
)
answer
index
function_index
parameters
mean(diamonds$price)
case_when(
function_index == 1 ~ mean(my_diamonds),
function_index == 2 ~ max(my_diamonds),
function_index == 3 ~ min(my_diamonds),
function_index == 4 ~ median(my_diamonds),
function_index == 5 ~ sd(my_diamonds),
function_index == 6 ~ max(my_diamonds)-min(my_diamonds)
) |> signif(3)
my_functions <- c("mean", "max", "min", "median", "sd", "range")
library(exams)
elearn_exam <- c("rexams/diamonds.Rmd")
set.seed(2021-01-22)
exams2moodle(elearn_exam, n = 3, name = "rexams")
mean(diamonds$depth)
range(diamonds$x)
sd(diamonds$x)
data(package = "tidyverse")
datasets(package = "tidyverse")
library(palmerpenguins)
glimpse(penguins)
class(penguins$species)
library(exams)
library(tidyverse)
library(palmerpenguins)
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_dpenguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
solution
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
solution
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
solution
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
solution
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
solution
parameters[index]
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
parameters[index]
solution
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
solution
parameters[index]
parameters <- names(penguins)
index <- sample(1:length(parameters), 1)
my_penguins <- penguins |> pull(parameters[index])
solution <- class(my_penguins)
parameters[index]
solution
library(tidyverse)
library(matlab)
begin <- 21003
end <- 2200
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(matlab)
begin <- 21003
end <- 2200
my_step <- 10
numbers <- seq(begin, end, by = my_step)
library(tidyverse)
library(matlab)
begin <- 21003
end <- 2200
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
