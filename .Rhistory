View(z)
library(exams)
elearn_exam <- c("rexams/week-2/dplyr-verbs.Rmd")
set.seed(42)
exams2moodle(elearn_exam, n = 2, name = "rexams")
?dplyr::select
?dplyr::filter
?dslabs::gapminder
dslabs::gapminder
dslabs::gapminder |> head()
glimpse(gapminder)
continent <- levels(gapminder$continent) |>
sample(1)
z <- gapminder |>
group_by(continent) |>
summarise(continent_pop = sum(population)) |>
ungroup()
z
table(gapminder$year)
my_continent <- levels(gapminder$continent) |>
sample(1)
my_year <- gaminder$year |>
unique()
my_continent <- levels(gapminder$continent) |>
sample(1)
my_year <- gapminder$year |>
unique() |>
sample(1)
my_continent
my_year
my_continent <- levels(gapminder$continent) |>
sample(1)
my_year <- gapminder$year |>
unique() |>
sample(1)
my_year
my_continent
my_continent <- levels(gapminder$continent) |>
sample(1)
my_year <- gapminder$year |>
unique() |>
sample(1)
my_year
my_continent
z <- gapminder |>
group_by(continent, year) |>
summarise(continent_pop = sum(population)) |>
ungroup()
z
View(z)
my_continents <- levels(gapminder$continent)
my_continents
names(gapminder)
head(gapminder)
table(gapmin$region)
table(gapminder$region)
z <- gapminder |>
filter(year == my_year) |>
group_by(continent) |>
summarise(continent_pop = sum(population),
life_exp = mean(life_expectancy)) |>
ungroup()
z
?gapminder
c(z$continent_pop, z$life_exp)
z <- gapminder |>
filter(year == my_year) |>
group_by(continent) |>
summarise(continent_pop = sum(population)/1e6,
life_exp = mean(life_expectancy)) |>
ungroup()
c(z$continent_pop, z$life_exp)
z <- gapminder |>
filter(year == my_year) |>
group_by(continent) |>
summarise(continent_pop = (sum(population)/1e6) |> signif(3),
life_exp = mean(life_expectancy) |> signif(3)) |>
ungroup()
c(z$continent_pop, z$life_exp)
library(exams)
elearn_exam <- c("rexams/week-2/gapminder-group.Rmd")
set.seed(42)
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
library(tidyverse)
library(matlab)
begin <- 10047
end <- 20000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(tidyverse)
pat <- "17/03/2023"
pat |> as.Date()
?format
pat |> as.Date(format = "%d/%m/%y")
pat |> as.Date(format = "%d/%m/%Y")
pat |> as.Date(format = "%d/%m/%Y") |> year()
library(lubridate)
pat |> as.Date(format = "%d/%m/%Y") |> year()
pat |> as.Date(format = "%d/%m/%Y") |> month()
z <- pat |> as.Date(format = "%d/%m/%Y")
z
format(z, "%A, %b, %d, %Y")
format(z, "%d")
format(z, "%d") |> scales::label_ordinal()
scales::label_ordinal()(format(z, "%d"))
scales::label_ordinal()(17)
scales::label_ordinal()(format(z, "%d") |> as.numeric())
OlsonNames()
mdy("July 4th, 2000")
format(pat, "July 4th, 2000")
format("July 4th, 2000")
pat
my_formats <- c("%y/%m/%d",
"%A %b %d %Y",
"%D",
"%Y - %d - %M",
"%b - %d - %m",
"%y %m %d",
"%Y %B %d",
"%y %b %d")
pat <- "17/03/2023" |> as.Date(format = "%d/%m/%Y")
format(pat, my_formats[1])
format(pat, my_formats[2])
format(pat, my_formats[3])
format(pat, my_formats[4])
format(pat, my_formats[5])
format(pat, my_formats[6])
format(pat, my_formats[7])
format(pat, my_formats[8])
my_formats <- c("%y %m %d",
"%A %b %d %Y",
"%D",
"%Y %m %d",
"%b %d %m",
"%y %m %d",
"%Y %B %d",
"%y %b %d",
"%Y %B %d",
"%y %b %d")
pat <- "17/03/2023" |> as.Date(format = "%d/%m/%Y")
map_chr(my_formats, function(x) format(pat, x))
my_formats <- c("%y %m %d",
"%A %b %d %Y",
"%D",
"%Y %m %d",
"%b %d %m",
"%y %d %m",
"%Y %B %d",
"%y %B %d",
"%Y %B %d",
"%y %b %d")
map_chr(my_formats, function(x) format(pat, x))
my_formats <- c("%y %m %d",
"%A %b %d %Y",
"%D",
"%Y %m %d",
"%b %d %m",
"%y %d %m",
"%Y %d %B",
"%y %B %d",
"%Y %B %d",
"%y %b %d")
map_chr(my_formats, function(x) format(pat, x))
1:10
index <- sample(1:10, 1)
1:10 %in% index
!(1:10 %in% index)
other_index <- 1:10[!(1:10 %in% index)]
other_index <- c(1:10)[!(1:10 %in% index)]
other_index
map_chr(my_formats[other_index], function(x) format(pat, x))
map_chr(my_formats, function(x) format(pat, x))
map_chr(my_formats[other_index], function(x) format(pat, x)) |>
sample(5)
pat
answer
format(pat, my_formats[index])
library(exams)
elearn_exam <- c("rexams/week-2/lubridate.Rmd")
set.seed(42)
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
pat
exams2moodle(elearn_exam, n = 2, name = "rexams")
z <- read_csv("rexams/data/university-rankings-kaggle.csv")
View(z)
z <- read_csv("rexams/data/university-rankings-kaggle.csv", skip = 1)
z <- read_csv("rexams/data/university-rankings-kaggle.csv")
z1 <- z[c(F, T),]
z1 <- z |> slice(which(row_number() %% 2 == 0))
View(z1)
countries <- z$Name[seq(3, 4877, by = 2)]
countries
countries |> head()
z1$country <- countries
glimpse(z1)
z <- z1$`Female:Male Ratio` |> str_split(":")
z[[1]]
z[[1]][1]
?extract
extract2(z)
library(magrittr#)
library(magrittr)
extract2(z)
extract2(z)(2)
z |> extract2(2)
hoist(z)
hoist(tibble(z=z))
hoist(tibble(z=z), .col = z)
?pluck
pluck(z, 2)
z1$ratio <- z
z2 <- z1 |> df1 %>%
rowwise() %>%
mutate(male = ratio[1], female = ratio[2]) %>%
ungroup()
z2 <- z1 |>
rowwise() %>%
mutate(male = ratio[1], female = ratio[2]) %>%
ungroup()
View(z2)
z3 <- z2 |> mutate(male_female_ratio = male/female)
glimpse(z2)
z3 <- z2 |> mutate(male_female_ratio = as.numeric(male)/as.numeric(female))
View(z3)
z3 <- z2 |> mutate(percent_female = as.numeric(female)/(as.numeric(female) + as.numeric(male)*100)
)
z3 <- z2 |> mutate(percent_female = as.numeric(female)/(as.numeric(female) + as.numeric(male))*100)
z3 <- z3 |> select(-Rank, -`Female:Male Ratio`, -ratio, -female, -percent_female)
z3 <- z3 |> rename(male = "percent_female")
z3 <- z3 |> rename("percent_female" = male)
write_csv(z3, "rexams/data/university-rankings-kaggle.csv")
write_csv(z3, "rexams/data/university-ranking-kaggle.csv")
z3 <- z3 |> janitor::clean_names()
write_csv(z3, "rexams/data/university-ranking-kaggle.csv")
z3 <- z3 |> mutate(international_students = str_remove(international_students, "%"))
glimpse(z3)
write_csv(z3, "rexams/data/university-ranking-kaggle.csv")
library(tidyverse)
z <- read_csv("rexams/data/university-ranking-kaggle.csv")
glimpse(z)
mean(z$percent_female)
mean(z$percent_female, na.rm = T)
mean(z$percent_female |> as.numeric(), na.rm = T)
library(tidyverse)
z <- read_csv("https://raw.githubusercontent.com/eugene100hickey/ATU-2023/main/rexams/data/university-ranking-kaggle.csv")
z
countriy <- z$country |> unique()
countriy
View(z)
country <- z$country |> unique()
head(country)
length(country)
View(as_tibble(country))
library(tidyverse)
z <- read_csv("rexams/data/World Universites Ranking 2023.csv")
View(z)
View(z)
z <- z |> filter(Name != "Explore")
z1 <- z |> filter(row_number() %% 2 == 0)
View(z1)
country <- z$Name[c(T, F)]
country
country |> lengt()
country |> length()
country <- country[-1]
country |> length()
head(country)
table(country)
z1 <- z |> filter(!is.na(Rank))
z1$Rank[1294]
z1 <- z1 |> mutate(Rank = str_remove(Rank, "\u.*"))
z1 <- z1 |> mutate(Rank = str_remove(Rank, "\\u.*"))
z1 <- z1 |> mutate(Rank = str_remove(Rank, "\\\u.*"))
row_number(z1)
z1 <- z1 |> mutate(Rank = row_number())
z1 <- z1 |> mutate(Rank = 2346-Rank)
country <- z |> filter(is.na(Rank)) |> pull(Name)
country
table(country)
length(country)
dim(z1)
View(tibble(country))
country <- country[-1]
length(country)
View(tibble(country))
country <- country[-1175]
length(country)
names(z1)
z1$country <- country
z1 <- z1 |> janitor::clean_names()
z2 <- z1 |> mutate(female_male_ratio = sub(female_male_ratio, ":.*",""))
View(z2)
z2 <- z1 |> mutate(female_male_ratio = sub(":.*","", female_male_ratio))
z2 <- z1 |> mutate(female_male_ratio = sub(":.*","", female_male_ratio), international_students = str_remove(international_students, "%"))
write_csv(z2, "rexams/data/university-ranking-kaggle.csv")
write_csv(z2, "rexams/data/university-rankings-kaggle.csv")
library(tidyverse)
z <- read_csv("https://raw.githubusercontent.com/eugene100hickey/ATU-2023/main/rexams/data/university-ranking-kaggle.csv")
z <- read_csv("https://raw.githubusercontent.com/eugene100hickey/ATU-2023/main/rexams/data/university-rankings-kaggle.csv")
View(z)
z1 <- table(z$country)
z1
z1 <- z1[z1>5]
z1
names(z1)
z1 country <- table(z$country)
country <- country[country > 5]
country <- names(country) |>
sample(1)
country <- table(z$country)
country <- country[country > 5]
country <- names(country) |>
sample(1)
country
country <- table(z$country)
country <- country[country > 5]
country <- names(country) |>
sample(1)
country
country <- table(z$country)
country <- country[country > 5]
my_country <- names(country) |>
sample(1)
my_country
country[my_country]
country[my_country] == 46
library(exams)
elearn_exam <- c("rexams/week-3/kaggle-univ-csv.Rmd")
set.seed(42)
exams2moodle(elearn_exam, n = 2, name = "rexams")
library(tidyverse)
z <- read_csv("rexams/data/Methane_final.csv")
View(z)
z <- z |>
group_by(type) |>
summarise(total = sum(emmisions)) |>
ungroup()
names(z)
z <- z |>
group_by(type) |>
summarise(total = sum(emisions)) |>
ungroup()
z <- z |>
group_by(type) |>
summarise(total = sum(emissions)) |>
ungroup()
z
z <- read_csv("rexams/data/Methane_final.csv")
z <- z |>
group_by(type, region) |>
summarise(total = sum(emissions)) |>
ungroup()
z
library(exams)
elearn_exam <- c("rexams/week-3/methane-csv.Rmd")
set.seed(42)
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
z <- read_csv("https://raw.githubusercontent.com/eugene100hickey/ATU-2023/main/rexams/data/Methane_final.csv")
z <- z |>
group_by(type, region) |>
summarise(total = sum(emissions)) |>
ungroup()
my_type <- z$type |>
unique() |>
sample(1)
my_region <- z$region |>
unique() |>
sample(1)
my_type
my_region
z
View(z)
z |>
filter(type == my_type, region == my_region) |>
pull(total)
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
z <- read_csv("rexams/data/Methane_final.csv")
z
z$emissions <- z$emissions/1e3
write_csv(z, "rexams/data/Methane_csv.csv")
write_csv(z, "rexams/data/Methane.csv")
exams2moodle(elearn_exam, n = 2, name = "rexams")
exams2moodle(elearn_exam, n = 2, name = "rexams")
library(tidyverse)
# library(tidytext)
library(rvest)
start <- 0
year <- 2016
my_rating <- 7.3
glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
?html_text
library(tidyverse)
library(matlab)
begin <- 50003
end <- 510000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
end <- 51000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 70003
end <- 71000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
numbers[isprime(numbers)==1 & between(numbers %% 1000, 000, 100)]
library(words)
z <- words |>
filter(word_length == 5)
z |> filter(str_detect(word, ".iede"))
z |> filter(str_detect(word, ".i.de"))
year <- 2013
my_rating <- 8.1
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
index <- 2
cast_url <- glue::glue("https://www.imdb.com/title/tt{all_movies$code[index]}/fullcredits/?ref_=tt_ql_cl")
xml_cast <- ".primary_photo+ td a"
w <- read_html(cast_url)
cast_data_html <- html_nodes(w, xml_cast)
(cast <- html_text(cast_data_html) |>
str_remove("\n") |>
str_squish())
cast1 <- cast
year <- 2005
my_rating <- 8
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
index <- 2
cast_url <- glue::glue("https://www.imdb.com/title/tt{all_movies$code[index]}/fullcredits/?ref_=tt_ql_cl")
xml_cast <- ".primary_photo+ td a"
w <- read_html(cast_url)
cast_data_html <- html_nodes(w, xml_cast)
(cast <- html_text(cast_data_html) |>
str_remove("\n") |>
str_squish())
cast[cast %in% cast1]
