LETTERS
Sys.date()
System.date()
sys.date()
Sys.Date()
citation("palmerpenguins")
airquality
?airquality
oolive
olive
library(dslabs)
olive
glimpse(olive)
summary(olive)
levels(olive$region)
library(swirl)
install_course("R Programming E")
swirl()
5+7
x <- 5 + 7
.libPaths()
packageVersion("rlang")
remotes::install_version("rlang", version = "1.0.2", repos = "http://cran.us.r-project.org")
packageVersion("rlang")
remotes::install_version("rlang", version = "1.0.2", repos = "http://cran.us.r-project.org")
packageVersion("rlang")
remotes::install_version("rlang", version = "1.1.0", repos = "http://cran.us.r-project.org")
packageVersion("rlang")
begin <- 30043
end <-100000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(matlab)
numbers[isprime(numbers)==1]
begin <- 30843
end <-100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |>
filter(word_length == 4)
z |> filter(str_detect(word, ".ose"))
library(words)
library(tidyverse)
library(matlab)
library(words)
z <- words |>
filter(word_length == 4)
library(tidyverse)
library(matlab)
library(words)
z <- words |>
filter(word_length == 4)
z |> filter(str_detect(word, ".ose"))
z <- words |>
filter(word_length == 4)
z <- words |>
filter(word_length == 4)
z <- words |>
dplyr::filter(word_length == 4)
words
z <- words |>
dplyr::filter(word_length == 4)
library(tidyverse)
library(matlab)
begin <- 34201
end <-34300
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 43201
end <-43300
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |>
dplyr::filter(word_length == 5)
z |> filter(str_detect(word, "e.i.n"))
z |> filter(str_detect(word, "e.i.o"))
z |> filter(str_detect(word, ".ioe."))
opts="[ioe]"
z |> filter(str_detect(word, glue::glue(".{opts}{opts}{opts}.")))
library(tidyverse)
library(rtoot)
get_timeline_public(hashtag = "rstats", instance = "mastodon.social", limit = 200)
library(tidyverse)
library(rtoot)
auth_setup()
get_timeline_public(hashtag = "rstats", instance = "mastodon.social", limit = 200)
date <- Sys.Date()
date <- paste0(wday(date, label = T, abbr = F), " ", month(date, label = T, abbr = F), " ", day(date), " ",year(date))
library(lubridate)
date <- paste0(wday(date, label = T, abbr = F), " ", month(date, label = T, abbr = F), " ", day(date), " ",year(date))
search_term <- "coronavirus"
# downloads tweets
token <- auth_get()# get_token()
library(rtoot)
# downloads tweets
token <- auth_get()# get_token()
get_timeline_public(hashtag = "rstats", instance = "mastodon.social", limit = 200)
?get_timeline_public
get_timeline_public()
z=.Last.value
View(z)
library(tidyverse)
library(rtoot)
library(lubridate)
auth_setup()
auth_setup()
auth_setup()
library(tidyverse)
library(rtoot)
library(lubridate)
auth_setup()
?auth_setup
auth_setup("mastodon.social", "public")
get_timeline_hashtag(hashtag = "rstats", instance = "fosstodon.org")
get_timeline_hashtag(hashtag = "rstats", instance = "fosstodon.org") |>
View()
get_timeline_hashtag(hashtag = "milan", instance = "fosstodon.org") |>
View()
get_timeline_hashtag(hashtag = "rstats", instance = "fosstodon.org")
greens <- .Last.value
# sees which lones have emojis
green_emojis <- greens %>%
mutate(emoji = emo::ji_extract_all(text)) %>%
unnest(cols = c(emoji)) %>%
count(emoji, sort = TRUE)
# function to download emoji image
emoji_to_link <- function(x) {
paste0("https://emojipedia.org/emoji/",x) %>%
read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
library(rvest)
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
green_emojis %>%
slice(1:10)
greens <- get_timeline_hashtag(hashtag = "milan", instance = "fosstodon.org", limit = 2000)
# sees which lones have emojis
green_emojis <- greens %>%
mutate(emoji = emo::ji_extract_all(text)) %>%
unnest(cols = c(emoji)) %>%
count(emoji, sort = TRUE)
# function to download emoji image
emoji_to_link <- function(x) {
paste0("https://emojipedia.org/emoji/",x) %>%
read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
lincoln <- "Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.
Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this.
But, in a larger sense, we can not dedicate—we can not consecrate—we can not hallow—this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us—that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion—that we here highly resolve that these dead shall not have died in vain—that this nation, under God, shall have a new birth of freedom—and that government of the people, by the people, for the people, shall not perish from the earth."
library(tidyverse)
?str_count
str_count(lincoln, pattern = "t")
test <- tribble(~colour, ~value,
"green", 23,
"turquoise", 34,
"magenta", 12)
View(test)
library(here)
here()
list.files()
here("week-02", "data", "CK-2015.pdf")
library(tidyverse)
gapminder::gapminder %>%
select(-continent, -lifeExp) |>
mutate(total_gdp_billions = pop * gdpPercap / 1e9) %>%
head() %>% kable()
gapminder::gapminder %>%
group_by(continent, year) %>%
summarise(mean_lifeExp = mean(lifeExp)) %>% ungroup() %>%
ggplot(aes(year, mean_lifeExp, col = continent)) +
geom_line() + geom_point()
library(showtext)
font_add("Fuzzy Bubbles", regular = "fonts/ABeeZee-Regular.ttf")
font_add_google("Neucha")
showtext_auto()
theme_clean <- function() {
theme_minimal(base_family = "Fuzzy Bubbles") +
theme(panel.grid.minor = element_blank(),
text = element_text(size = 16, family = "Fuzzy Bubbles"),
plot.background = element_rect(fill = "white", color = NA),
axis.text = element_text(size = 16),
axis.title = element_text(face = "bold", size = 20),
strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA),
legend.text = element_text(size = 16))
}
font_add_google("Neucha")
showtext_auto()
theme_clean <- function() {
theme_minimal(base_family = "Neucha") +
theme(panel.grid.minor = element_blank(),
text = element_text(size = 16, family = "Neucha"),
plot.background = element_rect(fill = "white", color = NA),
axis.text = element_text(size = 16),
axis.title = element_text(face = "bold", size = 20),
strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA),
legend.text = element_text(size = 16))
}
gapminder::gapminder %>%
group_by(continent, year) %>%
summarise(mean_lifeExp = mean(lifeExp)) %>% ungroup() %>%
ggplot(aes(year, mean_lifeExp, col = continent)) +
geom_line() + geom_point() + theme_clean()
library(tidyverse)
library(matlab)
begin <- 50001
end <- 100000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 56107
end <- 56200
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 65107
end <- 65200
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 51607
end <- 51700
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 61057
end <- 6200
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 61057
end <- 6200
my_step <- 100
numbers <- seq(begin, end, by = my_step)
end <- 62000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |>
dplyr::filter(word_length == 5)
z |> filter(str_detect(word, "t..an"))
remotes::install_github("ropensci/tabulizerjars")
library(rJava)
R.version
Sys.getenv("JAVA_HOME")
?Sys.getenv
Sys.getenv(c("R_HOME", "R_PAPERSIZE", "R_PRINTCMD", "HOST"))
Sys.getenv()
auth_setup("mastodon.social", "public")
library(rtoot)
auth_setup("mastodon.social", "public")
get_timeline_public(hashtag = "eurovision", instance = "mastodon.social", limit = 200)
?get_timeline_hashtag
get_timeline_hashtag(hashtag = "ichbinhanna", instance = "mastodon.social", anonymous = TRUE)
get_timeline_hashtag(hashtag = "ichbinhanna", instance = "mastodon.social", limit = 200)
get_timeline_hashtag(hashtag = "eurovision", instance = "mastodon.social", limit = 200)
get_timeline_hashtag(hashtag = "eurovision", instance = "mastodon.social", limit = 20)
pnorm(25, 12, 4)
pnorm(25, 12, 4, lower.tail = F)
pnorm(p = 1/365.25, mean = my_mean, sd = my_sd, lower.tail = FALSE)
qnorm(p = 1/365.25, mean = my_mean, sd = my_sd, lower.tail = FALSE)
qnorm(p = 1/365.25, mean = 12, sd = 5, lower.tail = FALSE)
259/30
library(tidyverse)
library(matlab)
begin <- 20001
end <- 21000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
825/179
?t.test
t.test(x = palmerpenguins::penguins$bill_depth_mm)
t.test(bill_depth_mm ~ species, data = palmerpenguins::penguins)
t.test(bill_depth_mm ~ sex, data = palmerpenguins::penguins)
airquality
airquality |> View()
table(airquality$Month)
t.test(Temp ~ Month, data  = airquality |> filter(Month %in% 5:6))
t.test(Temp ~ Month, data  = airquality |> filter(Month %in% 8:9))
t.test(Temp ~ Month, data  = airquality |> filter(Month %in% 8:7))
library(lter)
install.packages("lter")
install.packages("LTER")
remotes::install_github("lter/lterdatasampler")
library(lterdatasampler)
View(luq_streamchem)
table(luq_streamchem$sample_id)
t.test(luq_streamchem$p_h)
t.test(luq_streamchem$p_h-7)
t.test(luq_streamchem$no3_n)
?luq_streamchem
sum(is.na(luq_streamchem$nh4_n))
View(hbr_maples)
table(hbr_maples$watershed)
?hbr_maples
?arc_weather
View(arc_weather)
table(arc_weather$station)
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
View(my_data)
t.test(weight ~ group, my_data)
?t.test
t.test(weight ~ group, my_data, paired = T)
my_data <- my_data |> pivot_wider(names_from = "group", values_from = "weight")
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
my_data <- my_data |> pivot_wider(names_from = "group", values_from = "weight")
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after),
)
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after), code = c(1:10,  1:10)
)
?pivot_wider
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
before = before,
after = after)
)
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
before = before,
after = after
)
t.test(weight ~ group, my_data, paired = T)
t.test(x=my_data$before, y=my_data$after, paired = T)
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after), code = c(1:10,  1:10)
)
t.test(weight ~ group, my_data, paired = T)
before <-rnorm(10, mean = 200, sd = 10)
before <-rnorm(10, mean = 200, sd = 50)
before
after <- before + rnorm(10, sd=5)
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after), code = c(1:10,  1:10)
)
t.test(weight ~ group, my_data, paired = T)
before <-rnorm(10, mean = 200, sd = 50)
# Weight of the mice after treatment
after <- before + rnorm(10, mean = 5, sd=5)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after), code = c(1:10,  1:10)
)
t.test(weight ~ group, my_data, paired = T)
before <-rnorm(10, mean = 200, sd = 50)
# Weight of the mice after treatment
after <- before + rnorm(10, mean = 10, sd=5)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after), code = c(1:10,  1:10)
)
t.test(weight ~ group, my_data, paired = T)
t.test(weight ~ group, my_data, paired = F)
View(my_data)
View(my_data)
View(my_data)
fish_encounters
my_data <- my_data |> pivot_wider(names_from = "group", values_from = "weight")
before <-rnorm(10, mean = 200, sd = 50) |> round(1)
# Weight of the mice after treatment
after <- before + rnorm(10, mean = 10, sd=5) |> round(1)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after), mouse = c(1:10,  1:10)
)
my_data <- my_data |> pivot_wider(names_from = "group", values_from = "weight")
t.test(weight ~ group, my_data, paired = F)
before <-rnorm(10, mean = 200, sd = 50) |> round(1)
# Weight of the mice after treatment
after <- before + rnorm(10, mean = 10, sd=5) |> round(1)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after), mouse = c(1:10,  1:10)
)
t.test(weight ~ group, my_data, paired = F)
t.test(weight ~ group, my_data, paired = T)
t.test(airquality$Wind)
dim(airquality)
t.test(airquality$Wind)$conf.int
library(dslabs)
View(gapminder)
table(gapminder$continent)
table(gapminder$region)
table(gapminder$region |> filter(year == 2007))
table(gapminder |> filter(year == 2007 |> pull(region))
0
table(gapminder |> filter(year == 2007 |> pull(region)))
table(gapminder |> filter(year == 2007) |> pull(region))
gapminder |> filter(year == 2007, region %in% c("Northern Europe", "Southern Europe"))
gapminder |> filter(year == 2007, region %in% c("Northern Europe", "Southern Europe")) |> t.test(life_expectancy ~ region)
z <- gapminder |> filter(year == 2007, region %in% c("Northern Europe", "Southern Europe"))
t.test(life_expectancy ~  region, data = z)
library(swirl)
install_course("Statistical Inference")
swirl()
library(lterdatasampler)
knz_bison
t.test(knz_bison$animal_weight)
t.test(animal_weight  ~ animal_sex, data=knz_bison)
